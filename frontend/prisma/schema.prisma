// Prisma Schema untuk Anti-Plagiasi System
// Database untuk Data Masters
// Created by devnolife

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String
  password      String
  role          UserRole       @default(USER)
  avatar        String?
  emailVerified DateTime?

  // Account Status
  accountStatus AccountStatus  @default(PENDING_PROFILE)
  isActive      Boolean        @default(false)

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relations
  profile       UserProfile?
  documents     Document[]
  bypasses      BypassHistory[]
  settings      UserSettings?
  activityLogs  ActivityLog[]
  subscriptions Subscription[]
  paymentProofs PaymentProof[]

  @@map("users")
}

enum UserRole {
  ADMIN
  USER
  GUEST
}

enum AccountStatus {
  PENDING_PROFILE       // Belum lengkapi profile
  PENDING_PAYMENT       // Belum upload bukti pembayaran
  PENDING_VERIFICATION  // Menunggu verifikasi admin
  ACTIVE                // Sudah terverifikasi, bisa akses fitur
  SUSPENDED             // Akun di-suspend
  EXPIRED               // Langganan habis
}

// User Settings
model UserSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  defaultStrategy       String   @default("header_focused")
  autoAnalyze           Boolean  @default(true)
  notifications         Boolean  @default(true)
  theme                 String   @default("light")
  language              String   @default("id")

  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

// User Profile (Extended Information)
model UserProfile {
  id              String   @id @default(cuid())
  userId          String   @unique

  // Personal Information
  fullName        String
  phone           String
  address         String?
  city            String?
  province        String?
  postalCode      String?

  // Academic/Institutional Information
  institution     String?   // Universitas/Sekolah
  major           String?   // Jurusan
  studentId       String?   // NIM/NIS

  // Additional Info
  purpose         String?   // Tujuan penggunaan (skripsi, tesis, dll)

  completedAt     DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// Packages (Paket Berlangganan)
model Package {
  id              String   @id @default(cuid())

  // Package Info
  code            String   @unique  // PROPOSAL, HASIL, TUTUP
  name            String              // "Paket Proposal", "Paket Hasil", "Paket Tutup"
  description     String   @db.Text

  // Pricing
  price           Int                 // Harga dalam rupiah
  currency        String   @default("IDR")

  // Features & Limits
  features        Json     @default("[]")  // Daftar fitur
  maxDocuments    Int      @default(0)     // 0 = unlimited
  maxFileSize     Int      @default(10)    // dalam MB

  // Validity
  validityDays    Int      @default(30)    // Durasi paket (hari)

  // Status
  isActive        Boolean  @default(true)
  order           Int      @default(0)     // Urutan tampilan

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  subscriptions   Subscription[]

  @@map("packages")
  @@index([code])
  @@index([isActive])
}

// Payment Proof (Bukti Pembayaran)
model PaymentProof {
  id              String            @id @default(cuid())
  userId          String
  packageId       String

  // Payment Info
  paymentMethod   String            // Transfer Bank, E-Wallet, dll
  accountName     String            // Nama pengirim
  accountNumber   String?           // Nomor rekening/e-wallet pengirim
  amount          Int               // Jumlah yang ditransfer

  // Proof File
  proofImageUrl   String            // URL bukti transfer (disimpan di uploads/)
  originalFilename String
  fileSize        Int

  // Transaction Details
  transactionDate DateTime          // Tanggal transfer
  notes           String?           // Catatan dari user

  // Verification
  status          PaymentStatus     @default(PENDING)
  verifiedBy      String?           // Admin ID yang verifikasi
  verifiedAt      DateTime?
  rejectionReason String?           // Alasan jika ditolak
  adminNotes      String?           // Catatan dari admin

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription    Subscription?

  @@map("payment_proofs")
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

enum PaymentStatus {
  PENDING       // Menunggu verifikasi
  VERIFIED      // Sudah diverifikasi
  REJECTED      // Ditolak
}

// Subscriptions (Langganan User)
model Subscription {
  id              String            @id @default(cuid())
  userId          String
  packageId       String
  paymentProofId  String            @unique

  // Subscription Period
  startDate       DateTime?         // Mulai setelah diverifikasi
  endDate         DateTime?         // Berakhir sesuai validityDays

  // Status
  status          SubscriptionStatus @default(PENDING)
  isActive        Boolean           @default(false)

  // Usage Tracking
  documentsUsed   Int               @default(0)

  // Auto-renewal
  autoRenew       Boolean           @default(false)

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  package         Package           @relation(fields: [packageId], references: [id], onDelete: Cascade)
  paymentProof    PaymentProof      @relation(fields: [paymentProofId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
  @@index([userId])
  @@index([packageId])
  @@index([status])
  @@index([isActive])
  @@index([endDate])
}

enum SubscriptionStatus {
  PENDING       // Menunggu verifikasi payment
  ACTIVE        // Aktif dan bisa digunakan
  EXPIRED       // Sudah habis masa berlaku
  CANCELLED     // Dibatalkan
}

// Document Management
model Document {
  id                 String             @id @default(cuid())
  title              String
  originalFilename   String
  fileSize           Int
  fileType           String
  uploadPath         String?
  uploadedAt         DateTime           @default(now())
  userId             String
  status             DocumentStatus     @default(PENDING)
  
  // Metadata
  pageCount          Int?
  wordCount          Int?
  characterCount     Int?
  
  // Relations
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  analysis           DocumentAnalysis?
  bypasses           BypassHistory[]
  
  @@map("documents")
  @@index([userId])
  @@index([status])
  @@index([uploadedAt])
}

enum DocumentStatus {
  PENDING
  ANALYZING
  ANALYZED
  PROCESSING
  COMPLETED
  FAILED
}

// Document Analysis (from Python API)
model DocumentAnalysis {
  id                    String   @id @default(cuid())
  documentId            String   @unique
  
  // Analysis Results
  flagCount             Int      @default(0)
  flagTypes             Json     @default("[]")
  ocrText               String?  @db.Text
  metadata              Json     @default("{}")
  
  // Plagiarism Detection
  similarityScore       Float?
  plagiarismReport      Json?
  
  analyzedAt            DateTime @default(now())
  
  // Relations
  document              Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@map("document_analysis")
}

// Bypass History & Results
model BypassHistory {
  id                    String         @id @default(cuid())
  documentId            String
  userId                String
  strategy              String
  
  // Processing Info
  status                BypassStatus   @default(PENDING)
  progress              Int            @default(0)
  errorMessage          String?
  
  // Results
  outputPath            String?
  outputFilename        String?
  outputFileSize        Int?
  
  // Metrics
  flagsRemoved          Int?
  processingTime        Int?           // in seconds
  successRate           Float?
  
  // Metadata
  pythonApiResponse     Json?
  configuration         Json?
  
  createdAt             DateTime       @default(now())
  completedAt           DateTime?
  
  // Relations
  document              Document       @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user                  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("bypass_history")
  @@index([userId])
  @@index([documentId])
  @@index([status])
  @@index([createdAt])
}

enum BypassStatus {
  PENDING
  QUEUED
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

// Strategies Configuration
model Strategy {
  id                 String   @id @default(cuid())
  name               String   @unique
  displayName        String
  description        String
  category           String
  isActive           Boolean  @default(true)
  order              Int      @default(0)
  
  // Configuration
  defaultConfig      Json     @default("{}")
  capabilities       Json     @default("[]")
  
  // Usage Stats
  usageCount         Int      @default(0)
  successRate        Float?
  avgProcessingTime  Int?     // in seconds
  
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  @@map("strategies")
  @@index([category])
  @@index([isActive])
}

// System Statistics
model SystemStats {
  id                    String   @id @default(cuid())
  date                  DateTime @unique @default(now())
  
  // Daily Stats
  totalDocuments        Int      @default(0)
  totalBypasses         Int      @default(0)
  totalUsers            Int      @default(0)
  
  // Processing Stats
  successfulBypasses    Int      @default(0)
  failedBypasses        Int      @default(0)
  avgProcessingTime     Int?     // in seconds
  
  // Storage Stats
  totalStorageUsed      BigInt?  // in bytes
  totalDocumentsSize    BigInt?  // in bytes
  
  // API Stats
  pythonApiCalls        Int      @default(0)
  pythonApiErrors       Int      @default(0)
  
  createdAt             DateTime @default(now())
  
  @@map("system_stats")
  @@index([date])
}

// Activity Logs
model ActivityLog {
  id          String       @id @default(cuid())
  userId      String?
  action      String
  resource    String
  resourceId  String?
  details     Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime     @default(now())

  // Relations
  user        User?        @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("activity_logs")
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}
